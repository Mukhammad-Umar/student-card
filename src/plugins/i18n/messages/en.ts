export default {
  main: 'Main',
  forecast: 'Forecast',
  filter: 'Filter',
  goToPage: 'Go',
  noData: 'No data',
  emptyFile: 'File is empty',
  enter: 'Enter',
  log_In: 'Log in',
  login: 'Login',
  password: 'Password',
  enterLogin: 'Enter login',
  enterPassword: 'Enter password',
  matchPassword: 'Confirmation password does not match',
  amount: 'Amount',
  all: 'All',
  total: 'Total',
  text: 'Text',
  title: 'Name',
  value: 'Value',
  request: 'Request',
  response: 'Response',
  balance: 'Balance',
  templates: 'Templates',
  cardHolder: 'Card name',
  importing: 'Importing',
  notImporting: 'Not Importing',
  totalImporting: 'Total importing',
  changePassword: 'Change Password',
  personalDetails: 'Personal Details',
  description: 'Description',

  cycle: 'Cycle',
  kb: 'KB',
  loading: 'Loading',
  search: 'Search',
  create: 'Create',
  add: 'Add',
  update: 'Update',
  edit: 'Edit',
  change: 'Change',
  back: 'Back',
  save: 'Save',
  confirm: 'Confirm',
  status: 'Status',
  reset: 'Reset',
  import: 'Import',
  export: 'Export',
  importPayers: 'Import payers',
  info: 'Info',
  recentlyFiles: 'Recent files',
  todaysFiles: "Today's files",
  archiveFiles: 'Archive',
  importedFiles: 'Uploaded files',
  apply: 'Apply',
  requests: 'Requests',
  answer: 'Answer',
  send: 'Send',
  active: 'Active',
  completed: 'Completed',
  progress: 'Progress',
  paid: 'Paid',
  selectDate: 'Select date',
  regDate: 'Date of registration',
  compDate: 'Date of completion',
  canceledDate: 'Canceled date',
  addedBy: 'Added by',
  clear: 'Clear',
  client: 'Client',
  showMore: 'Show more',
  hide: 'Hide',
  apiLogin: 'API Login',
  apiPassword: 'API Password',

  welcome: 'Welcome',
  profile: 'Profile',
  profileEdit: 'Profile edit',
  changePhoto: 'Change photo',
  account: 'Account',
  security: 'Security',
  uploadNewPhoto: 'Upload new photo',
  allowedImg: 'Allowed JPG, GIF or PNG.',
  currentPassword: 'Current Password',
  newPassword: 'New Password',
  confirmPassword: 'Confirm New Password',
  rejectedCards: 'Rejected cards',
  cancelCard: 'Cancel card',

  autopayments: 'AutoPayments',
  autopayment: 'AutoPayment',
  payment: 'Payment',
  epos: 'EPOS',
  branch: 'Branch',
  role: 'Role',
  autopayLimit: 'Autopayment Limits',
  users: 'Users',
  groups: 'Groups',
  roles: 'Roles',
  system: 'System',
  telInfo: 'Questions about the system?',
  projectInfo: 'Autopayment system for merchants.',
  chooseEpos: 'Choose EPOS',
  addedDate: 'Added date',
  startDate: 'Start date',
  endDate: 'End date',
  autoPayAmount: 'Auto payment amount',
  contractAmount: 'Contract amount',
  payedAmount: 'Paid amount',
  leftAmount: 'Remaining amount',
  mainBranch: 'Main',
  processing: 'Processing',
  connectedGroups: 'Connected groups',
  connectedBranches: 'Connected branches',
  existTerminal: 'Existing terminal',

  dashboard: {
    tranByDayTitle: 'Transactions per month by day',
    tranReverseByDayTitle: 'Canceled transactions per month by day',
  },

  filters: {
    pinfl: 'PINFL',
    fio: 'Full name',
    refNum: 'Transaction ID',
    contractId: 'Contract ID',
    contractNumber: 'Contract number',
    holderFio: 'Holder full name',
    passportSerie: 'Passport series',
    contract: 'Contract',
    terminalId: 'Terminal ID',
    merchantId: 'Merchant ID',
    autoPayId: 'Autopayment ID',
    bank: 'Bank',
    branch: 'Branch',
    date: 'Date',
    period: 'Period',
    cardNumber: 'Card number',
    cardExpiry: 'Card expiry',
    cardAccount: 'Card account',
    accountNumber: 'Account number',
    action: 'Action',
    status: 'Status',
    event: 'Event(triger)',
    userName: 'User name',
    pushStatus: 'Push status',
    resendPush: 'Resend Push',
    tranStatus: 'Transaction status',
    type: 'Type',
    gateway: 'Gateway',
    pushType: 'Push type',
    cardType: 'Card type',
    clientType: 'Client type',
    cardStatus: 'Card statsu',
    tranExt: 'Ext ID',
    payedDate: 'Write-off date',
    startWriteOff: 'Write-off start',
    canceled: 'Canceled',
    reverseDate: 'Cancellation date',
    cancelTransaction: 'Cancel transaction',
    cardExpireStatus: 'Card expire status',
    allTransactions: 'All transactions',
    wroteOffTransactions: 'Written off transactions',
    canceledTransactions: 'Canceled transactions',
    allSystems: 'All systems',
    nameMatch: 'Name match',
  },

  table: {
    show: 'Show',
    records: 'records',
    showing: 'Showing',
    to: 'to',
    of: 'of',
    results: 'results',
    planSum: 'Expected Amount',
    totalSum: 'Total amount',
    writtenOff: 'Written off amount',
    reverseSum: 'Total Refund',
  },

  infoCards: {
    activePayments: 'Active auto payments',
    todayAvarage: 'Average write-off amount today',
    todayProcessed: 'Processed auto payments for today',
    todayPayment: 'Amount of write-offs for today',
    todayCanceledPayment: 'Amount of canceled write-offs for today',
    todayTransaction: 'Number of transactions for today',
    clientCount: 'Number of clients',
    totalWriteOff: 'Total write-off amount',
    canceledCount: 'Number of canceled transactions',
    predictCount: 'Expected write-off amount',
  },

  viewBox: {
    organization: 'Organization',
    systemAccess: 'System Access',
    apiAccess: 'API Access',
    webAccess: 'Web Menu Access',
    user: 'User',
    contract: 'Contract',
    payerCards: 'Payer Cards',
    noCards: 'No Cards',
    approveWriteOff: 'Approve write-off',
    isApprove: 'Approve a card for debiting?',
    restoreCard: 'Restore card',
    deleteCard: 'Delete card',
    clientData: 'Client data',
    contractData: 'Contract data',
    autopayData: 'Auto payment data',
    orgData: 'Organization Data',
  },

  clientsTab: {
    contracts: 'Contracts',
    transactions: 'Transactions',
    autopayments: 'Autopayments',
    payers: 'Payers',
    scoring: 'Scoring',
    addPayerContract: 'Add Payer/Contract',
    autopaysByTran: 'Auto payment transactions',
  },

  orgTab: {
    organizations: 'Organizations',
    addOrganization: 'Add Organization',
    accessOrganization: 'Organization Access',
    usersOrganization: 'Organizaztion Users',
  },

  menus: {
    dashboard: 'Dashboard',
    profile: 'Profile',
    clients: 'Clients',
    payers: 'Payers',
    payersContracts: 'Clients and Contracts',
    addPayCont: 'Add Client&Contract',
    personalData: 'Personal data',
    whiteList: 'White List',
    autopayments: 'AutoPayments',
    addAutopay: 'Add Autopayment',
    payments: 'Payments',
    list: 'List',
    import: 'Import',
    importAll: 'Import data',
    importedFiles: 'Imported Files',
    importErrors: 'Errors',
    reports: 'Reports',
    transactions: 'Transactions',
    transaction: 'Transaction',
    operations: 'Operations',
    refund: 'Cancel transaction',
    overdraft: 'Overdraft',
    errors: 'Erroneous transactions',
    settings: 'Settings',
    systemUsers: 'System users',
    users: 'Users',
    logout: 'Logout',
    repayment: 'Repayment',
    system: 'System',
    event: 'Event',
    eventList: 'Events list',
    incident: 'Incident',
    terminals: 'Terminals',
    terminalSettings: 'Terminal settings',
    branches: 'Branches',
    accesses: 'Accesses',

    // Admin
    organisations: 'Organizations',
    admins: 'Admins',
    settlement: 'Settlement',
    push: 'Informing',
    smsPush: 'SMS informing',
    pushHistory: 'History of Push informing',
    emailPush: 'Email informing',
    apiPush: 'API informing (json)',
    tariffReport: 'Tariffs and Reports',
    tariffs: 'Tariffs',
    integration: 'Systems Integrations',
    systemSettings: 'System settings',
    bank: 'Bank',
    obiReports: 'OBI Reports',
    obiTerminals: 'Terminals for OBI',
    recieveSettings: 'Recieve settings',
    payment: 'Payment',
    cards: 'Cards',
    allCards: 'All cards',
    unconfirmedCards: 'Unconfirmed cards',
    defunctCards: 'Defunct cards',
    excludedCards: 'Excluded cards',
    rejectedCards: 'Rejected cards',
    addedCards: 'Added cards',
    unidentifiedCards: 'Unidentified cards',
    backgroundCards: 'Background cards',
    deletedCards: 'Deleted cards',
    pinflCards: 'By PINFL request',
    bigDebts: 'PINFL with big debts',
    resultPinfl: 'Result by PINFL request',
    writeOffAttemps: 'Write-off attempts–µ',
    apiIntegration: 'API integration',
    mailSetting: 'Mail settings',
    orgSettings: 'Org settings',
  },

  view: {
    payerData: 'Payer data',
    cards: 'Cards',
    payment: 'Payment',
    transactions: 'Transactions',
    contracts: 'Contracts',
    autopayParams: 'Autopayment details',
    createAutopay: 'Autopayment create',
    addAutopay: 'Add autopayment',
    paymentGraph: 'Payment grapgh',
  },

  userInfo: {
    userName: 'Login',
    password: 'Password',
    name: 'Name',
    middleName: 'Middlename',
    lastName: 'Lastname',
    date: 'Date',
    dateBirth: 'Date of birth',
    phoneNumber: 'Phone number',
    email: 'Email',
    passportIssue: 'Date of issue',
    passportExpiry: 'Date of expiry',
    numberSeries: 'Passport No.',
    passportSeries: 'Passport series',
    passportNumber: 'Passport number',
    pinfl: 'PINFL',
    tin: 'TIN',
    isAdmin: 'Admin',
    isActivate: 'Active',
    contractId: 'Contract ID',
    branch: 'Branch',
    epos: 'EPOS',
    isBlocked: 'Block',
  },

  sysUsers: {
    orgRoles: 'Organization roles',
    orgRolesDesc:
      'The role provides access to predefined menus and functions, depending on the assigned role, the user can have access to the functionality and sections of the system.',
    addRole: 'Add role',
    addRoleInfo: 'Add a new role \n' + "if it doesn't exist.",
    createRole: 'Create role',
    editRole: 'Edit role',
    createRoleInfo: 'Select menu sections and key functionality',
    createRoleName: 'Role name',
    roleUsers: 'Role users',
    orgBranch: 'Organization branches',
    orgBranchDesc:
      'Branch distribution is intended for access to view and distribution of visibility of payers and contracts, the convenience of user distribution lies in the fact that users of the system do not confuse and work only according to their payers and contracts.',
    addBranch: 'Add branch',
    addBranchInfo: 'Add a new branch \n' + "if it doesn't exist.",
    createBranch: 'Create branch',
    editBranch: 'Edit branch',
    createBranchInfo:
      'Select fiala users to separate payer and contract access',
    createBranchName: 'Branch name',
    branchUsers: 'Branch users',
    branchTerminal: 'Available groups of EPOS',
    branchTerminalTotal: 'Total group of EPOS',
    orgUsers: 'System Users',
    orgUsersDesc:
      'Find all administrator accounts in your company and their associated roles.',
    addUser: 'Add user',
    editUser: 'Edit user',
    addUserDesc: 'System users are needed to distribute access to the service',
    searchUser: 'Search user',
    addGroup: 'Add group',
    addIntegrationLoan: 'Add installment integration',
    menu: 'Menu',
    functional: 'Functional',
    event: 'Event',
    push: 'Pushes',
    system: 'System',
    requisites: 'Requisites',
    finalStep: 'Final step',
    createOrg: 'Create organization',
    editOrg: 'Edit organization',
    organizationUsers: 'Organization Users',
    addAdmin: 'Add Administrator',
    editAdmin: 'Edit Administrator',
    orgName: 'Organization name',
    orgAction: 'Organization actions',
    compName: 'Company name',
    mfo: 'MFI',
    tin: 'TIN',
    rs: 'R/s',
    address: 'Address',
    gateBranch: 'Gateway branch ID',
    compTel: 'Company tel. number',
    orgType: 'Organization type',
    director: 'Director',
    directorName: "Director's name",
    responsibleName: 'Name of person in charge',
    responsibleTel: 'Responsible tel. number',
    terminalGroups: 'Terminal groups',
    integrations: 'Integrations',
    specSettings: 'Special settings',
    groupName: 'Group name',
    group: 'Group',
    originator: 'Originator',
    eposCount: 'Number of EPOS',
    smsText: 'Text *Contract number #Amount ?Card',
    smsTextPlaceholder: 'According to your contract No.*, the amount * was debited from the card ?',
    smsReverseText: 'Reverse text *Contract number #Amount ?Card',
    tokenPass: 'Password token',
    sms: 'SMS',
    pushBySMS: 'Push by SMS',
    pushByApi: 'API push',
  },

  viewInfo: {
    addTariff: 'Add tariff for an organization',
    editTariff: 'Edit tariff for an organization',
    addIntegrationSystem: 'Add system',
    editIntegrationSystem: 'Edit system',
    allCompleted: 'All entries processed',
    inProccess: 'Accept for processing',
    waitProcess: 'Please wait while the file is being processed',
    notAllCompleted: 'Not all entries processed',
    forceStopped: 'Manual recording processing stopped',
    completedCount: 'Number of records processed',
    viewFile: 'Viewing File Entries',
    importDate: 'Import date',
    errorLoad: 'Download erroneous records',
    allLoad: 'Download all records',
    stopFile: 'Finish processing',
  },

  breadcrumbs: {
    clientView: 'Client&Contract View',
    clients: 'Clients',
    autopayView: 'Autopayment View',
    autopayments: 'Autopayments',
    transactionView: 'Transaction View',
    transactions: 'Transactions',
    errorView: 'Error View',
    smsPushView: 'SMS informing View',
    view: 'View',
  },

  btn_text: {
    from: 'from',
    to: 'to',
    stop: 'Stop',
    finish: 'Finish',
    resume: 'Resume',
    cancel: 'Cancel',
    back: 'Back',
    continue: 'Continue',
    previous: 'Previous',
    ahead: 'Next',
    goTo: 'Go',
    confirm: 'Confirm',
    no: 'No',
    yes: 'Yes',
    saveChanges: 'Save changes',
    close: 'Close',
    addContract: 'Add contract',
    addWhiteList: 'Add to the Whitelist',
    addAutopayment: 'Add Autopayment',
    addCard: 'Add card',
    addTerminal: 'Add terminal',
    editTerminal: 'Edit terminal',
    addAdmin: 'Add adminstrator',
    addTariff: 'Add tariff',
    addSystem: 'Add System',
    choose: 'Choose',
    eposSetting: 'Customize EPOS',
    cardByPinfl: 'Request a card by pinfl',
    refreshCards: 'Refresh cards list',
    selectAll: 'Select all',
    unselectAll: 'Un-select all',
    checkData: 'Check data',
    deleteSelected: 'Delete selected',
  },

  rules: {
    required: 'The field must be filled!',
    integer: 'Value must be a number',
    email: 'Email address must be valid',
    password: 'Password must be made up of numbers and letters',
    password_min: 'Password must be at least {n} characters',
  },

  success: {
    paramMessage: 'Settings set successfully',
    deleted: 'Successfully removed',
    approved: 'Successfully approved',
    added: 'Successfully added',
    updated: 'Successfully updated',
    stopped: 'Successfully stopped',
    finished: 'Successfully finished',
    resumed: 'Successfully resumed',
    sent: 'Successfully sent',
    imported: 'Data accepted for processing',
    passwordSuccess: 'Password changed successfully',
    successApproved: 'Card successfully approved',
    successRestored: 'Card successfully restored',
    successDeleted: 'Card successfully deleted',
    successApply: 'Apply successfully sent',
    successSend: 'Answer successfully sent',
  },

  error: {
    terminalSelect: 'Terminal not selected',
    noSuchPinfl: 'This PINFL does not exist in the system',
    errorOccurred: 'Error occurred',
    noData: 'No data',
    noFunctionals: 'You need to select a menu to display the functionality',
    unveilableBanks: 'The bank is temporarily out of service',
    matchError: "Full name doesn't match",
    overdraftCard: 'Overdraft card',
    creditCard: 'Credit card',
    blockedCard: 'Card blocked',
  },

  dialog: {
    missingData: '–î–∞–Ω–Ω—ã–µ, —É –∫–æ—Ç–æ—Ä—ã—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–∞–∫–æ–π-–ª–∏–±–æ –ø–∞—Ä–∞–º–µ—Ç—Ä',
    cardNumber: 'Card number',
    cardExpire: 'Card expire',
    subject: 'Theme',
    action: 'Action',
    sureDelete: 'Remove from list?',
    humoRequest: 'Request a paid PINFL inquiry via HUMO?',
    finishSelecteds: 'Complete all selected auto payments?',
    finishAll: 'Complete all auto payments?',
    finishCurrent: 'Complete current auto payment?',
    resumeSelecteds: 'Resume all selected auto payments?',
    resumeAll: 'Resume all auto payments?',
    resumeCurrent: 'Resume current auto payment?',
    stopSelecteds: 'Stop all selected auto payments?',
    stopAll: 'Stop all auto payments?',
    stopCurrent: 'Stop current auto payment?',
    finishFile: 'End file processing?',
  },

  input: {},

  validations: {
    required: 'The field is required.',
    minLength: 'The password must be at least {min} characters long.',
  },
}
